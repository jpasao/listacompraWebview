# Generated by Django 5.1.6 on 2025-02-27 15:17

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('authorid', models.AutoField(db_column='authorId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'authors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Difficulty',
            fields=[
                ('difficultid', models.PositiveIntegerField(db_column='difficultId', primary_key=True, serialize=False)),
                ('name', models.TextField()),
            ],
            options={
                'db_table': 'difficulties',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Historic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('userid', models.IntegerField(db_column='userId')),
                ('username', models.CharField(db_column='userName', max_length=100)),
                ('itemid', models.IntegerField(db_column='itemId')),
                ('itemname', models.TextField(db_column='itemName')),
                ('operationid', models.SmallIntegerField(db_column='operationId', db_comment='1->create, 2->update, 3->check, 4->uncheck, 5->delete')),
                ('createdat', models.DateTimeField(blank=True, db_column='createdAt', null=True)),
                ('firebasesent', models.IntegerField(blank=True, db_column='firebaseSent', null=True)),
                ('remoteaddr', models.CharField(blank=True, db_column='remoteAddr', max_length=45, null=True)),
                ('originaldata', models.TextField(blank=True, db_column='originalData', null=True)),
            ],
            options={
                'db_table': 'historic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('imageid', models.AutoField(db_column='imageId', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'images',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('ingredientid', models.AutoField(db_column='ingredientId', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_collation='utf8mb4_general_ci', null=True)),
                ('isproduct', models.TextField(blank=True, db_column='isProduct', null=True)),
                ('ischecked', models.CharField(blank=True, db_column='isChecked', max_length=1, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, db_collation='utf8mb4_general_ci', null=True)),
            ],
            options={
                'db_table': 'ingredients',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('message', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('mealid', models.AutoField(db_column='mealId', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_collation='utf8mb4_general_ci', null=True)),
                ('islunch', models.IntegerField(db_column='isLunch')),
                ('ischecked', models.IntegerField(db_column='isChecked')),
            ],
            options={
                'db_table': 'meals',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('noteid', models.AutoField(db_column='noteId', primary_key=True, serialize=False)),
                ('note', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'notes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('operationid', models.IntegerField(db_column='operationId', primary_key=True, serialize=False)),
                ('authorid', models.IntegerField(blank=True, db_column='authorId', null=True)),
                ('productid', models.IntegerField(blank=True, db_column='productId', null=True)),
                ('typeid', models.IntegerField(blank=True, db_column='typeId', null=True)),
            ],
            options={
                'db_table': 'operations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Otherchild',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('ischecked', models.IntegerField(db_column='isChecked')),
            ],
            options={
                'db_table': 'otherschild',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Otherparent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'othersparent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('recipeid', models.AutoField(db_column='recipeId', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('authorid', models.IntegerField(db_column='authorId')),
                ('date', models.DateField()),
                ('views', models.PositiveIntegerField()),
                ('preparationminutes', models.PositiveIntegerField(blank=True, db_column='preparationMinutes', null=True)),
                ('difficultyid', models.PositiveIntegerField(blank=True, db_column='difficultyId', null=True)),
            ],
            options={
                'db_table': 'recipes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tagid', models.AutoField(db_column='tagId', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'tags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('stepid', models.AutoField(db_column='stepId', primary_key=True, serialize=False)),
                ('step', models.CharField(max_length=1000)),
            ],
            options={
                'db_table': 'steps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipeingredient',
            fields=[
                ('ingredientid', models.OneToOneField(db_column='ingredientId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='lista.ingredient')),
                ('number', models.CharField(blank=True, db_collation='latin1_swedish_ci', max_length=50, null=True)),
                ('ingredientnote', models.CharField(blank=True, db_collation='latin1_swedish_ci', db_column='ingredientNote', max_length=200, null=True)),
            ],
            options={
                'db_table': 'recipeingredients',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mealingredient',
            fields=[
                ('mealid', models.OneToOneField(db_column='mealId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='lista.meal')),
            ],
            options={
                'db_table': 'mealingredients',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipetag',
            fields=[
                ('tagid', models.OneToOneField(db_column='tagId', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='lista.tag')),
            ],
            options={
                'db_table': 'recipetags',
                'managed': False,
            },
        ),
    ]
